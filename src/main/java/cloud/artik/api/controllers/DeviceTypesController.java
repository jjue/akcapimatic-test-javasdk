/*
 * ARTIKCloudAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package cloud.artik.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;

import cloud.artik.api.*;
import cloud.artik.api.models.*;
import cloud.artik.api.exceptions.*;
import cloud.artik.api.http.client.HttpClient;
import cloud.artik.api.http.client.HttpContext;
import cloud.artik.api.http.request.HttpRequest;
import cloud.artik.api.http.response.HttpResponse;
import cloud.artik.api.http.response.HttpStringResponse;
import cloud.artik.api.http.client.APICallBack;
import cloud.artik.api.controllers.syncwrapper.APICallBackCatcher;

public class DeviceTypesController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static DeviceTypesController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the DeviceTypesController class 
     */
    public static DeviceTypesController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new DeviceTypesController();
            }
        }
        return instance;
    }

    /**
     * Get Latest Manifest Properties
     * @param    deviceTypeId    Required parameter: Device Type ID.
     * @return    Returns the ManifestPropertiesEnvelope response from the API call 
     */
    public ManifestPropertiesEnvelope getLatestManifestProperties(
                final String deviceTypeId
    ) throws Throwable {
        APICallBackCatcher<ManifestPropertiesEnvelope> callback = new APICallBackCatcher<ManifestPropertiesEnvelope>();
        getLatestManifestPropertiesAsync(deviceTypeId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get Latest Manifest Properties
     * @param    deviceTypeId    Required parameter: Device Type ID.
     * @return    Returns the void response from the API call 
     */
    public void getLatestManifestPropertiesAsync(
                final String deviceTypeId,
                final APICallBack<ManifestPropertiesEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicetypes/{deviceTypeId}/manifests/latest/properties");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5162115490624649087L;
            {
                    put( "deviceTypeId", deviceTypeId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5179915212628037486L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ManifestPropertiesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ManifestPropertiesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get Available Manifest Versions
     * @param    deviceTypeId    Required parameter: deviceTypeId
     * @return    Returns the ManifestVersionsEnvelope response from the API call 
     */
    public ManifestVersionsEnvelope getAvailableManifestVersions(
                final String deviceTypeId
    ) throws Throwable {
        APICallBackCatcher<ManifestVersionsEnvelope> callback = new APICallBackCatcher<ManifestVersionsEnvelope>();
        getAvailableManifestVersionsAsync(deviceTypeId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get Available Manifest Versions
     * @param    deviceTypeId    Required parameter: deviceTypeId
     * @return    Returns the void response from the API call 
     */
    public void getAvailableManifestVersionsAsync(
                final String deviceTypeId,
                final APICallBack<ManifestVersionsEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicetypes/{deviceTypeId}/availablemanifestversions");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5453292989761915465L;
            {
                    put( "deviceTypeId", deviceTypeId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5165457581463826786L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ManifestVersionsEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ManifestVersionsEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get Device Type
     * @param    deviceTypeId    Required parameter: deviceTypeId
     * @return    Returns the DeviceTypeEnvelope response from the API call 
     */
    public DeviceTypeEnvelope getDeviceType(
                final String deviceTypeId
    ) throws Throwable {
        APICallBackCatcher<DeviceTypeEnvelope> callback = new APICallBackCatcher<DeviceTypeEnvelope>();
        getDeviceTypeAsync(deviceTypeId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get Device Type
     * @param    deviceTypeId    Required parameter: deviceTypeId
     * @return    Returns the void response from the API call 
     */
    public void getDeviceTypeAsync(
                final String deviceTypeId,
                final APICallBack<DeviceTypeEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicetypes/{deviceTypeId}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4614453990937709854L;
            {
                    put( "deviceTypeId", deviceTypeId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4687895398449854023L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceTypeEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceTypeEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get Device Types by Application
     * @param    appId    Required parameter: Application ID.
     * @param    productInfo    Optional parameter: Flag to include the associated ProductInfo if present
     * @param    count    Optional parameter: Desired count of items in the result set.
     * @param    offset    Optional parameter: Offset for pagination.
     * @return    Returns the DeviceTypesEnvelope response from the API call 
     */
    public DeviceTypesEnvelope getDeviceTypesByApplication(
                final String appId,
                final Boolean productInfo,
                final Integer count,
                final Integer offset
    ) throws Throwable {
        APICallBackCatcher<DeviceTypesEnvelope> callback = new APICallBackCatcher<DeviceTypesEnvelope>();
        getDeviceTypesByApplicationAsync(appId, productInfo, count, offset, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get Device Types by Application
     * @param    appId    Required parameter: Application ID.
     * @param    productInfo    Optional parameter: Flag to include the associated ProductInfo if present
     * @param    count    Optional parameter: Desired count of items in the result set.
     * @param    offset    Optional parameter: Offset for pagination.
     * @return    Returns the void response from the API call 
     */
    public void getDeviceTypesByApplicationAsync(
                final String appId,
                final Boolean productInfo,
                final Integer count,
                final Integer offset,
                final APICallBack<DeviceTypesEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/applications/{appId}/devicetypes");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5498042690528183450L;
            {
                    put( "appId", appId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4684874575401994297L;
            {
                    put( "productInfo", productInfo );
                    put( "count", count );
                    put( "offset", offset );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5400590646939921462L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceTypesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceTypesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get manifest properties
     * @param    deviceTypeId    Required parameter: Device Type ID.
     * @param    version    Required parameter: Manifest Version.
     * @return    Returns the ManifestPropertiesEnvelope response from the API call 
     */
    public ManifestPropertiesEnvelope getManifestProperties2(
                final String deviceTypeId,
                final String version
    ) throws Throwable {
        APICallBackCatcher<ManifestPropertiesEnvelope> callback = new APICallBackCatcher<ManifestPropertiesEnvelope>();
        getManifestProperties2Async(deviceTypeId, version, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get manifest properties
     * @param    deviceTypeId    Required parameter: Device Type ID.
     * @param    version    Required parameter: Manifest Version.
     * @return    Returns the void response from the API call 
     */
    public void getManifestProperties2Async(
                final String deviceTypeId,
                final String version,
                final APICallBack<ManifestPropertiesEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicetypes/{deviceTypeId}/manifests/{version}/properties");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5179054746056925415L;
            {
                    put( "deviceTypeId", deviceTypeId );
                    put( "version", version );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5764279328123157758L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ManifestPropertiesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ManifestPropertiesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get Device Types
     * @param    name    Required parameter: Device Type name
     * @param    offset    Optional parameter: Offset for pagination.
     * @param    count    Optional parameter: Desired count of items in the result set
     * @param    tags    Optional parameter: Elements tagged with the list of tags. (comma separated)
     * @return    Returns the DeviceTypesEnvelope response from the API call 
     */
    public DeviceTypesEnvelope getDeviceTypes(
                final String name,
                final Integer offset,
                final Integer count,
                final String tags
    ) throws Throwable {
        APICallBackCatcher<DeviceTypesEnvelope> callback = new APICallBackCatcher<DeviceTypesEnvelope>();
        getDeviceTypesAsync(name, offset, count, tags, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get Device Types
     * @param    name    Required parameter: Device Type name
     * @param    offset    Optional parameter: Offset for pagination.
     * @param    count    Optional parameter: Desired count of items in the result set
     * @param    tags    Optional parameter: Elements tagged with the list of tags. (comma separated)
     * @return    Returns the void response from the API call 
     */
    public void getDeviceTypesAsync(
                final String name,
                final Integer offset,
                final Integer count,
                final String tags,
                final APICallBack<DeviceTypesEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicetypes");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5292434189365654749L;
            {
                    put( "name", name );
                    put( "offset", offset );
                    put( "count", count );
                    put( "tags", tags );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5227475688843618348L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceTypesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceTypesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}