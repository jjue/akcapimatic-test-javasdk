/*
 * ARTIKCloudAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package cloud.artik.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import cloud.artik.api.*;
import cloud.artik.api.models.*;
import cloud.artik.api.exceptions.*;
import cloud.artik.api.http.client.HttpClient;
import cloud.artik.api.http.client.HttpContext;
import cloud.artik.api.http.request.HttpRequest;
import cloud.artik.api.http.response.HttpResponse;
import cloud.artik.api.http.response.HttpStringResponse;
import cloud.artik.api.http.client.APICallBack;
import cloud.artik.api.controllers.syncwrapper.APICallBackCatcher;

public class DevicesManagementController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static DevicesManagementController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the DevicesManagementController class 
     */
    public static DevicesManagementController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new DevicesManagementController();
            }
        }
        return instance;
    }

    /**
     * Returns the list of tasks for a particular device id with optional status filter.
     * @param    did    Required parameter: Device ID.
     * @param    count    Optional parameter: Max results count.
     * @param    offset    Optional parameter: Result starting offset.
     * @param    status    Optional parameter: Status filter. Comma-separated statuses.
     * @param    order    Optional parameter: Sort results by a field. Valid fields: createdOn.
     * @param    sort    Optional parameter: Sort order. Valid values: asc or desc.
     * @return    Returns the TaskByDidListEnvelope response from the API call 
     */
    public TaskByDidListEnvelope getAllByDid(
                final String did,
                final Integer count,
                final Integer offset,
                final String status,
                final String order,
                final String sort
    ) throws Throwable {
        APICallBackCatcher<TaskByDidListEnvelope> callback = new APICallBackCatcher<TaskByDidListEnvelope>();
        getAllByDidAsync(did, count, offset, status, order, sort, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns the list of tasks for a particular device id with optional status filter.
     * @param    did    Required parameter: Device ID.
     * @param    count    Optional parameter: Max results count.
     * @param    offset    Optional parameter: Result starting offset.
     * @param    status    Optional parameter: Status filter. Comma-separated statuses.
     * @param    order    Optional parameter: Sort results by a field. Valid fields: createdOn.
     * @param    sort    Optional parameter: Sort order. Valid values: asc or desc.
     * @return    Returns the void response from the API call 
     */
    public void getAllByDidAsync(
                final String did,
                final Integer count,
                final Integer offset,
                final String status,
                final String order,
                final String sort,
                final APICallBack<TaskByDidListEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/devices/{did}/tasks");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5210414353970476527L;
            {
                    put( "did", did );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5315944102889527163L;
            {
                    put( "count", count );
                    put( "offset", offset );
                    put( "status", status );
                    put( "order", order );
                    put( "sort", sort );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5680337765652122701L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            TaskByDidListEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<TaskByDidListEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns the details and global status of a specific task id.
     * @param    tid    Required parameter: Task ID.
     * @return    Returns the TaskEnvelope response from the API call 
     */
    public TaskEnvelope getTaskByID(
                final String tid
    ) throws Throwable {
        APICallBackCatcher<TaskEnvelope> callback = new APICallBackCatcher<TaskEnvelope>();
        getTaskByIDAsync(tid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns the details and global status of a specific task id.
     * @param    tid    Required parameter: Task ID.
     * @return    Returns the void response from the API call 
     */
    public void getTaskByIDAsync(
                final String tid,
                final APICallBack<TaskEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/tasks/{tid}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5408401872304795534L;
            {
                    put( "tid", tid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5186676027952307763L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            TaskEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<TaskEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Create a new task for one or more devices
     * @param    taskPayload    Required parameter: Task object to be created
     * @return    Returns the TaskEnvelope response from the API call 
     */
    public TaskEnvelope createTasks(
                final TaskRequest taskPayload
    ) throws Throwable {
        APICallBackCatcher<TaskEnvelope> callback = new APICallBackCatcher<TaskEnvelope>();
        createTasksAsync(taskPayload, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create a new task for one or more devices
     * @param    taskPayload    Required parameter: Task object to be created
     * @return    Returns the void response from the API call 
     */
    public void createTasksAsync(
                final TaskRequest taskPayload,
                final APICallBack<TaskEnvelope> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/tasks");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5566236730463786724L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(taskPayload));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            TaskEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<TaskEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Deletes a device's properties.
     * @param    did    Required parameter: Device ID.
     * @return    Returns the MetadataEnvelope response from the API call 
     */
    public MetadataEnvelope deleteServerProperties(
                final String did
    ) throws Throwable {
        APICallBackCatcher<MetadataEnvelope> callback = new APICallBackCatcher<MetadataEnvelope>();
        deleteServerPropertiesAsync(did, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Deletes a device's properties.
     * @param    did    Required parameter: Device ID.
     * @return    Returns the void response from the API call 
     */
    public void deleteServerPropertiesAsync(
                final String did,
                final APICallBack<MetadataEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/devices/{did}/serverproperties");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5481073250209173347L;
            {
                    put( "did", did );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5735013391206725091L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            MetadataEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<MetadataEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get a device type's device management manifest properties
     * @param    dtid    Required parameter: Device Type ID.
     * @return    Returns the MetadataPropertiesEnvelope response from the API call 
     */
    public MetadataPropertiesEnvelope getManifestProperties1(
                final String dtid
    ) throws Throwable {
        APICallBackCatcher<MetadataPropertiesEnvelope> callback = new APICallBackCatcher<MetadataPropertiesEnvelope>();
        getManifestProperties1Async(dtid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get a device type's device management manifest properties
     * @param    dtid    Required parameter: Device Type ID.
     * @return    Returns the void response from the API call 
     */
    public void getManifestProperties1Async(
                final String dtid,
                final APICallBack<MetadataPropertiesEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/devicetypes/{dtid}/manifest/properties");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5755816000758044880L;
            {
                    put( "dtid", dtid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5067062499782422593L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            MetadataPropertiesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<MetadataPropertiesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Read a device type device management information.
     * @param    dtid    Required parameter: Device type ID.
     * @return    Returns the DeviceTypesInfoEnvelope response from the API call 
     */
    public DeviceTypesInfoEnvelope getDeviceTypesInfo(
                final String dtid
    ) throws Throwable {
        APICallBackCatcher<DeviceTypesInfoEnvelope> callback = new APICallBackCatcher<DeviceTypesInfoEnvelope>();
        getDeviceTypesInfoAsync(dtid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Read a device type device management information.
     * @param    dtid    Required parameter: Device type ID.
     * @return    Returns the void response from the API call 
     */
    public void getDeviceTypesInfoAsync(
                final String dtid,
                final APICallBack<DeviceTypesInfoEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/devicetypes/{dtid}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5035979603510814015L;
            {
                    put( "dtid", dtid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4987869603615604758L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceTypesInfoEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceTypesInfoEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Updates a task for all devices - For now just allows changing the state to cancelled.
     * @param    tid    Required parameter: Task ID.
     * @param    taskUpdateRequest    Required parameter: Task update request
     * @return    Returns the TaskUpdateResponse response from the API call 
     */
    public TaskUpdateResponse updateTask(
                final String tid,
                final TaskUpdateRequest taskUpdateRequest
    ) throws Throwable {
        APICallBackCatcher<TaskUpdateResponse> callback = new APICallBackCatcher<TaskUpdateResponse>();
        updateTaskAsync(tid, taskUpdateRequest, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Updates a task for all devices - For now just allows changing the state to cancelled.
     * @param    tid    Required parameter: Task ID.
     * @param    taskUpdateRequest    Required parameter: Task update request
     * @return    Returns the void response from the API call 
     */
    public void updateTaskAsync(
                final String tid,
                final TaskUpdateRequest taskUpdateRequest,
                final APICallBack<TaskUpdateResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/tasks/{tid}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4810609504650544346L;
            {
                    put( "tid", tid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5503981530274846848L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(taskUpdateRequest));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            TaskUpdateResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<TaskUpdateResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns the all the tasks for a device type.
     * @param    dtid    Required parameter: Device Type ID.
     * @param    count    Optional parameter: Max results count.
     * @param    offset    Optional parameter: Result starting offset.
     * @param    status    Optional parameter: Status filter. Comma-separated statuses.
     * @param    order    Optional parameter: Sort results by a field. Valid fields: createdOn.
     * @param    sort    Optional parameter: Sort order. Valid values: asc or desc.
     * @return    Returns the TaskListEnvelope response from the API call 
     */
    public TaskListEnvelope getTasks(
                final String dtid,
                final Integer count,
                final Integer offset,
                final String status,
                final String order,
                final String sort
    ) throws Throwable {
        APICallBackCatcher<TaskListEnvelope> callback = new APICallBackCatcher<TaskListEnvelope>();
        getTasksAsync(dtid, count, offset, status, order, sort, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns the all the tasks for a device type.
     * @param    dtid    Required parameter: Device Type ID.
     * @param    count    Optional parameter: Max results count.
     * @param    offset    Optional parameter: Result starting offset.
     * @param    status    Optional parameter: Status filter. Comma-separated statuses.
     * @param    order    Optional parameter: Sort results by a field. Valid fields: createdOn.
     * @param    sort    Optional parameter: Sort order. Valid values: asc or desc.
     * @return    Returns the void response from the API call 
     */
    public void getTasksAsync(
                final String dtid,
                final Integer count,
                final Integer offset,
                final String status,
                final String order,
                final String sort,
                final APICallBack<TaskListEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/tasks");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4841073952776373085L;
            {
                    put( "dtid", dtid );
                    put( "count", count );
                    put( "offset", offset );
                    put( "status", status );
                    put( "order", order );
                    put( "sort", sort );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5601666406851855900L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            TaskListEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<TaskListEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns the details and status of a task id and the individual statuses of each device id in the list.
     * @param    tid    Required parameter: Task ID.
     * @param    count    Optional parameter: Max results count.
     * @param    offset    Optional parameter: Result starting offset.
     * @param    status    Optional parameter: Status filter. Comma-separated statuses.
     * @param    dids    Optional parameter: Devices filter. Comma-separated device IDs.
     * @return    Returns the TaskStatusesEnvelope response from the API call 
     */
    public TaskStatusesEnvelope getStatuses(
                final String tid,
                final Integer count,
                final Integer offset,
                final String status,
                final String dids
    ) throws Throwable {
        APICallBackCatcher<TaskStatusesEnvelope> callback = new APICallBackCatcher<TaskStatusesEnvelope>();
        getStatusesAsync(tid, count, offset, status, dids, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns the details and status of a task id and the individual statuses of each device id in the list.
     * @param    tid    Required parameter: Task ID.
     * @param    count    Optional parameter: Max results count.
     * @param    offset    Optional parameter: Result starting offset.
     * @param    status    Optional parameter: Status filter. Comma-separated statuses.
     * @param    dids    Optional parameter: Devices filter. Comma-separated device IDs.
     * @return    Returns the void response from the API call 
     */
    public void getStatusesAsync(
                final String tid,
                final Integer count,
                final Integer offset,
                final String status,
                final String dids,
                final APICallBack<TaskStatusesEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/tasks/{tid}/statuses");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5033724484467507546L;
            {
                    put( "tid", tid );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5141086958246309773L;
            {
                    put( "count", count );
                    put( "offset", offset );
                    put( "status", status );
                    put( "dids", dids );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5750394341179074146L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            TaskStatusesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<TaskStatusesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Updates a task for a specific device - For now just allows changing the state to cancelled.
     * @param    tid    Required parameter: Task ID.
     * @param    did    Required parameter: Device ID.
     * @param    deviceTaskUpdateRequest    Required parameter: Device task update request
     * @return    Returns the DeviceTaskUpdateResponse response from the API call 
     */
    public DeviceTaskUpdateResponse updateTaskForDevice(
                final String tid,
                final String did,
                final DeviceTaskUpdateRequest deviceTaskUpdateRequest
    ) throws Throwable {
        APICallBackCatcher<DeviceTaskUpdateResponse> callback = new APICallBackCatcher<DeviceTaskUpdateResponse>();
        updateTaskForDeviceAsync(tid, did, deviceTaskUpdateRequest, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Updates a task for a specific device - For now just allows changing the state to cancelled.
     * @param    tid    Required parameter: Task ID.
     * @param    did    Required parameter: Device ID.
     * @param    deviceTaskUpdateRequest    Required parameter: Device task update request
     * @return    Returns the void response from the API call 
     */
    public void updateTaskForDeviceAsync(
                final String tid,
                final String did,
                final DeviceTaskUpdateRequest deviceTaskUpdateRequest,
                final APICallBack<DeviceTaskUpdateResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/tasks/{tid}/devices/{did}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4906359766637343053L;
            {
                    put( "tid", tid );
                    put( "did", did );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5178136066499475949L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(deviceTaskUpdateRequest));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceTaskUpdateResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceTaskUpdateResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Returns the history of the status changes for a specific task id, or for a specific device id in that task.
     * @param    tid    Required parameter: Task ID.
     * @param    did    Optional parameter: Device ID. Optional.
     * @return    Returns the TaskStatusesHistoryEnvelope response from the API call 
     */
    public TaskStatusesHistoryEnvelope getStatusesHistory(
                final String tid,
                final String did
    ) throws Throwable {
        APICallBackCatcher<TaskStatusesHistoryEnvelope> callback = new APICallBackCatcher<TaskStatusesHistoryEnvelope>();
        getStatusesHistoryAsync(tid, did, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Returns the history of the status changes for a specific task id, or for a specific device id in that task.
     * @param    tid    Required parameter: Task ID.
     * @param    did    Optional parameter: Device ID. Optional.
     * @return    Returns the void response from the API call 
     */
    public void getStatusesHistoryAsync(
                final String tid,
                final String did,
                final APICallBack<TaskStatusesHistoryEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/tasks/{tid}/statuses/history");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5414488605361540698L;
            {
                    put( "tid", tid );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4650203404917633898L;
            {
                    put( "did", did );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5670045913092718180L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            TaskStatusesHistoryEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<TaskStatusesHistoryEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Updates a device's server properties.
     * @param    did    Required parameter: Device ID.
     * @param    deviceProperties    Required parameter: Device properties object to be set
     * @return    Returns the MetadataEnvelope response from the API call 
     */
    public MetadataEnvelope updateServerProperties(
                final String did,
                final Object deviceProperties
    ) throws Throwable {
        APICallBackCatcher<MetadataEnvelope> callback = new APICallBackCatcher<MetadataEnvelope>();
        updateServerPropertiesAsync(did, deviceProperties, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Updates a device's server properties.
     * @param    did    Required parameter: Device ID.
     * @param    deviceProperties    Required parameter: Device properties object to be set
     * @return    Returns the void response from the API call 
     */
    public void updateServerPropertiesAsync(
                final String did,
                final Object deviceProperties,
                final APICallBack<MetadataEnvelope> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/devices/{did}/serverproperties");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4675093696157161804L;
            {
                    put( "did", did );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5063593735668675972L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(deviceProperties));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            MetadataEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<MetadataEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Query device properties across devices.
     * @param    dtid    Required parameter: Device Type ID.
     * @param    count    Optional parameter: Max results count.
     * @param    offset    Optional parameter: Result starting offset.
     * @param    filter    Optional parameter: Query filter. Comma-separated key=value pairs
     * @param    includeTimestamp    Optional parameter: Include timestamp.
     * @return    Returns the MetadataQueryEnvelope response from the API call 
     */
    public MetadataQueryEnvelope getQueryProperties(
                final String dtid,
                final Integer count,
                final Integer offset,
                final String filter,
                final Boolean includeTimestamp
    ) throws Throwable {
        APICallBackCatcher<MetadataQueryEnvelope> callback = new APICallBackCatcher<MetadataQueryEnvelope>();
        getQueryPropertiesAsync(dtid, count, offset, filter, includeTimestamp, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Query device properties across devices.
     * @param    dtid    Required parameter: Device Type ID.
     * @param    count    Optional parameter: Max results count.
     * @param    offset    Optional parameter: Result starting offset.
     * @param    filter    Optional parameter: Query filter. Comma-separated key=value pairs
     * @param    includeTimestamp    Optional parameter: Include timestamp.
     * @return    Returns the void response from the API call 
     */
    public void getQueryPropertiesAsync(
                final String dtid,
                final Integer count,
                final Integer offset,
                final String filter,
                final Boolean includeTimestamp,
                final APICallBack<MetadataQueryEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/devices/properties");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5208631682913435138L;
            {
                    put( "dtid", dtid );
                    put( "count", count );
                    put( "offset", offset );
                    put( "filter", filter );
                    put( "includeTimestamp", includeTimestamp );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4884545722122606330L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            MetadataQueryEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<MetadataQueryEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Read a device's properties.
     * @param    did    Required parameter: Device ID.
     * @param    includeTimestamp    Optional parameter: Include timestamp.
     * @return    Returns the MetadataEnvelope response from the API call 
     */
    public MetadataEnvelope getProperties(
                final String did,
                final Boolean includeTimestamp
    ) throws Throwable {
        APICallBackCatcher<MetadataEnvelope> callback = new APICallBackCatcher<MetadataEnvelope>();
        getPropertiesAsync(did, includeTimestamp, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Read a device's properties.
     * @param    did    Required parameter: Device ID.
     * @param    includeTimestamp    Optional parameter: Include timestamp.
     * @return    Returns the void response from the API call 
     */
    public void getPropertiesAsync(
                final String did,
                final Boolean includeTimestamp,
                final APICallBack<MetadataEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/devices/{did}/properties");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4831854340215117751L;
            {
                    put( "did", did );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5435518494293261746L;
            {
                    put( "includeTimestamp", includeTimestamp );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5700696197159319663L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            MetadataEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<MetadataEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Updates a device type information
     * @param    dtid    Required parameter: Device type ID.
     * @param    deviceTypeInfo    Required parameter: Device type info object to be set
     * @return    Returns the DeviceTypesInfoEnvelope response from the API call 
     */
    public DeviceTypesInfoEnvelope updateDeviceTypesInfo(
                final String dtid,
                final DeviceTypesInfo deviceTypeInfo
    ) throws Throwable {
        APICallBackCatcher<DeviceTypesInfoEnvelope> callback = new APICallBackCatcher<DeviceTypesInfoEnvelope>();
        updateDeviceTypesInfoAsync(dtid, deviceTypeInfo, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Updates a device type information
     * @param    dtid    Required parameter: Device type ID.
     * @param    deviceTypeInfo    Required parameter: Device type info object to be set
     * @return    Returns the void response from the API call 
     */
    public void updateDeviceTypesInfoAsync(
                final String dtid,
                final DeviceTypesInfo deviceTypeInfo,
                final APICallBack<DeviceTypesInfoEnvelope> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devicemgmt/devicetypes/{dtid}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5090276195483338750L;
            {
                    put( "dtid", dtid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5062254079283769151L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(deviceTypeInfo));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceTypesInfoEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceTypesInfoEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}