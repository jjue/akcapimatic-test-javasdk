/*
 * ARTIKCloudAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package cloud.artik.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import cloud.artik.api.*;
import cloud.artik.api.models.*;
import cloud.artik.api.exceptions.*;
import cloud.artik.api.http.client.HttpClient;
import cloud.artik.api.http.client.HttpContext;
import cloud.artik.api.http.request.HttpRequest;
import cloud.artik.api.http.response.HttpResponse;
import cloud.artik.api.http.response.HttpStringResponse;
import cloud.artik.api.http.client.APICallBack;
import cloud.artik.api.controllers.syncwrapper.APICallBackCatcher;

public class DevicesSharesController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static DevicesSharesController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the DevicesSharesController class 
     */
    public static DevicesSharesController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new DevicesSharesController();
            }
        }
        return instance;
    }

    /**
     * Share a device 
     * @param    deviceId    Required parameter: Device ID.
     * @param    deviceShareInfo    Required parameter: Device object that needs to be added
     * @return    Returns the DeviceSharingId response from the API call 
     */
    public DeviceSharingId createShareForDevice(
                final String deviceId,
                final DeviceShareInfo deviceShareInfo
    ) throws Throwable {
        APICallBackCatcher<DeviceSharingId> callback = new APICallBackCatcher<DeviceSharingId>();
        createShareForDeviceAsync(deviceId, deviceShareInfo, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Share a device 
     * @param    deviceId    Required parameter: Device ID.
     * @param    deviceShareInfo    Required parameter: Device object that needs to be added
     * @return    Returns the void response from the API call 
     */
    public void createShareForDeviceAsync(
                final String deviceId,
                final DeviceShareInfo deviceShareInfo,
                final APICallBack<DeviceSharingId> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/{deviceId}/shares");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5178821895870655938L;
            {
                    put( "deviceId", deviceId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4773514313483861101L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(deviceShareInfo));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceSharingId _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceSharingId>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * List all shares for the given device id
     * @param    deviceId    Required parameter: Device ID.
     * @param    count    Optional parameter: Desired count of items in the result set.
     * @param    offset    Optional parameter: Offset for pagination.
     * @return    Returns the DeviceSharingEnvelope response from the API call 
     */
    public DeviceSharingEnvelope getAllSharesForDevice(
                final String deviceId,
                final Integer count,
                final Integer offset
    ) throws Throwable {
        APICallBackCatcher<DeviceSharingEnvelope> callback = new APICallBackCatcher<DeviceSharingEnvelope>();
        getAllSharesForDeviceAsync(deviceId, count, offset, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * List all shares for the given device id
     * @param    deviceId    Required parameter: Device ID.
     * @param    count    Optional parameter: Desired count of items in the result set.
     * @param    offset    Optional parameter: Offset for pagination.
     * @return    Returns the void response from the API call 
     */
    public void getAllSharesForDeviceAsync(
                final String deviceId,
                final Integer count,
                final Integer offset,
                final APICallBack<DeviceSharingEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/{deviceId}/shares");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4650407085068155153L;
            {
                    put( "deviceId", deviceId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5717485264617233000L;
            {
                    put( "count", count );
                    put( "offset", offset );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4995037260762541914L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceSharingEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceSharingEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Delete specific share of the given device id
     * @param    deviceId    Required parameter: Device ID.
     * @param    shareId    Required parameter: Share ID.
     * @return    Returns the DeviceSharingId response from the API call 
     */
    public DeviceSharingId deleteSharingForDevice(
                final String deviceId,
                final String shareId
    ) throws Throwable {
        APICallBackCatcher<DeviceSharingId> callback = new APICallBackCatcher<DeviceSharingId>();
        deleteSharingForDeviceAsync(deviceId, shareId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Delete specific share of the given device id
     * @param    deviceId    Required parameter: Device ID.
     * @param    shareId    Required parameter: Share ID.
     * @return    Returns the void response from the API call 
     */
    public void deleteSharingForDeviceAsync(
                final String deviceId,
                final String shareId,
                final APICallBack<DeviceSharingId> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/{deviceId}/shares/{shareId}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5321511820908747239L;
            {
                    put( "deviceId", deviceId );
                    put( "shareId", shareId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5712955121366975970L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceSharingId _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceSharingId>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get specific share of the given device id
     * @param    deviceId    Required parameter: Device ID.
     * @param    shareId    Required parameter: Share ID.
     * @return    Returns the DeviceSharing response from the API call 
     */
    public DeviceSharing getSharingForDevice(
                final String deviceId,
                final String shareId
    ) throws Throwable {
        APICallBackCatcher<DeviceSharing> callback = new APICallBackCatcher<DeviceSharing>();
        getSharingForDeviceAsync(deviceId, shareId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get specific share of the given device id
     * @param    deviceId    Required parameter: Device ID.
     * @param    shareId    Required parameter: Share ID.
     * @return    Returns the void response from the API call 
     */
    public void getSharingForDeviceAsync(
                final String deviceId,
                final String shareId,
                final APICallBack<DeviceSharing> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/devices/{deviceId}/shares/{shareId}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4637257199585676950L;
            {
                    put( "deviceId", deviceId );
                    put( "shareId", shareId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4892127649831362941L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceSharing _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceSharing>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}