/*
 * ARTIKCloudAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package cloud.artik.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import cloud.artik.api.*;
import cloud.artik.api.models.*;
import cloud.artik.api.exceptions.*;
import cloud.artik.api.http.client.HttpClient;
import cloud.artik.api.http.client.HttpContext;
import cloud.artik.api.http.request.HttpRequest;
import cloud.artik.api.http.response.HttpResponse;
import cloud.artik.api.http.response.HttpStringResponse;
import cloud.artik.api.http.client.APICallBack;
import cloud.artik.api.controllers.syncwrapper.APICallBackCatcher;

public class UsersController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static UsersController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the UsersController class 
     */
    public static UsersController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new UsersController();
            }
        }
        return instance;
    }

    /**
     * Get User Devices
     * @param    userId    Required parameter: User ID
     * @param    offset    Optional parameter: Offset for pagination.
     * @param    count    Optional parameter: Desired count of items in the result set
     * @param    includeProperties    Optional parameter: Optional. Boolean (true/false) - If false, only return the user's device types. If true, also return device types shared by other users.
     * @param    owner    Optional parameter: Return owned and/or shared devices. Default to ALL.
     * @param    includeShareInfo    Optional parameter: Include share info
     * @return    Returns the DevicesEnvelope response from the API call 
     */
    public DevicesEnvelope getUserDevices(
                final String userId,
                final Integer offset,
                final Integer count,
                final Boolean includeProperties,
                final OwnerEnum owner,
                final Boolean includeShareInfo
    ) throws Throwable {
        APICallBackCatcher<DevicesEnvelope> callback = new APICallBackCatcher<DevicesEnvelope>();
        getUserDevicesAsync(userId, offset, count, includeProperties, owner, includeShareInfo, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get User Devices
     * @param    userId    Required parameter: User ID
     * @param    offset    Optional parameter: Offset for pagination.
     * @param    count    Optional parameter: Desired count of items in the result set
     * @param    includeProperties    Optional parameter: Optional. Boolean (true/false) - If false, only return the user's device types. If true, also return device types shared by other users.
     * @param    owner    Optional parameter: Return owned and/or shared devices. Default to ALL.
     * @param    includeShareInfo    Optional parameter: Include share info
     * @return    Returns the void response from the API call 
     */
    public void getUserDevicesAsync(
                final String userId,
                final Integer offset,
                final Integer count,
                final Boolean includeProperties,
                final OwnerEnum owner,
                final Boolean includeShareInfo,
                final APICallBack<DevicesEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/users/{userId}/devices");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5651430119658352530L;
            {
                    put( "userId", userId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4698482304823136883L;
            {
                    put( "offset", offset );
                    put( "count", count );
                    put( "includeProperties", includeProperties );
                    put( "owner", (owner != null) ? owner.value() : null );
                    put( "includeShareInfo", includeShareInfo );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4778059829797398762L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DevicesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DevicesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get Current User Profile
     * @return    Returns the UserEnvelope response from the API call 
     */
    public UserEnvelope getSelf(
    ) throws Throwable {
        APICallBackCatcher<UserEnvelope> callback = new APICallBackCatcher<UserEnvelope>();
        getSelfAsync(callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get Current User Profile
     * @return    Returns the void response from the API call 
     */
    public void getSelfAsync(
                final APICallBack<UserEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/users/self");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5240167603113827070L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            UserEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<UserEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get User shares
     * @param    userId    Required parameter: User ID.
     * @param    filter    Required parameter: filter
     * @param    count    Optional parameter: Desired count of items in the result set.
     * @param    offset    Optional parameter: Offset for pagination.
     * @return    Returns the DeviceSharingEnvelope response from the API call 
     */
    public DeviceSharingEnvelope listAllSharesForUser(
                final String userId,
                final String filter,
                final Integer count,
                final Integer offset
    ) throws Throwable {
        APICallBackCatcher<DeviceSharingEnvelope> callback = new APICallBackCatcher<DeviceSharingEnvelope>();
        listAllSharesForUserAsync(userId, filter, count, offset, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get User shares
     * @param    userId    Required parameter: User ID.
     * @param    filter    Required parameter: filter
     * @param    count    Optional parameter: Desired count of items in the result set.
     * @param    offset    Optional parameter: Offset for pagination.
     * @return    Returns the void response from the API call 
     */
    public void listAllSharesForUserAsync(
                final String userId,
                final String filter,
                final Integer count,
                final Integer offset,
                final APICallBack<DeviceSharingEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/users/{userId}/shares");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4834515951835124417L;
            {
                    put( "userId", userId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5176648053600100542L;
            {
                    put( "filter", filter );
                    put( "count", count );
                    put( "offset", offset );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4745718910958977477L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceSharingEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceSharingEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get User Rules
     * @param    userId    Required parameter: User ID.
     * @param    excludeDisabled    Optional parameter: Exclude disabled rules in the result.
     * @param    count    Optional parameter: Desired count of items in the result set.
     * @param    offset    Optional parameter: Offset for pagination.
     * @param    owner    Optional parameter: Rule owner
     * @return    Returns the RulesEnvelope response from the API call 
     */
    public RulesEnvelope getUserRules(
                final String userId,
                final Boolean excludeDisabled,
                final Integer count,
                final Integer offset,
                final Owner142Enum owner
    ) throws Throwable {
        APICallBackCatcher<RulesEnvelope> callback = new APICallBackCatcher<RulesEnvelope>();
        getUserRulesAsync(userId, excludeDisabled, count, offset, owner, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get User Rules
     * @param    userId    Required parameter: User ID.
     * @param    excludeDisabled    Optional parameter: Exclude disabled rules in the result.
     * @param    count    Optional parameter: Desired count of items in the result set.
     * @param    offset    Optional parameter: Offset for pagination.
     * @param    owner    Optional parameter: Rule owner
     * @return    Returns the void response from the API call 
     */
    public void getUserRulesAsync(
                final String userId,
                final Boolean excludeDisabled,
                final Integer count,
                final Integer offset,
                final Owner142Enum owner,
                final APICallBack<RulesEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/users/{userId}/rules");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5046142337376631824L;
            {
                    put( "userId", userId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5207342080851306812L;
            {
                    put( "excludeDisabled", excludeDisabled );
                    put( "count", count );
                    put( "offset", offset );
                    put( "owner", (owner != null) ? owner.value() : null );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5678405365877468649L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            RulesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RulesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get User Device Types
     * @param    userId    Required parameter: User ID.
     * @param    offset    Optional parameter: Offset for pagination.
     * @param    count    Optional parameter: Desired count of items in the result set
     * @param    includeShared    Optional parameter: Optional. Boolean (true/false) - If false, only return the user's device types. If true, also return device types shared by other users.
     * @return    Returns the DeviceTypesEnvelope response from the API call 
     */
    public DeviceTypesEnvelope getUserDeviceTypes(
                final String userId,
                final Integer offset,
                final Integer count,
                final Boolean includeShared
    ) throws Throwable {
        APICallBackCatcher<DeviceTypesEnvelope> callback = new APICallBackCatcher<DeviceTypesEnvelope>();
        getUserDeviceTypesAsync(userId, offset, count, includeShared, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get User Device Types
     * @param    userId    Required parameter: User ID.
     * @param    offset    Optional parameter: Offset for pagination.
     * @param    count    Optional parameter: Desired count of items in the result set
     * @param    includeShared    Optional parameter: Optional. Boolean (true/false) - If false, only return the user's device types. If true, also return device types shared by other users.
     * @return    Returns the void response from the API call 
     */
    public void getUserDeviceTypesAsync(
                final String userId,
                final Integer offset,
                final Integer count,
                final Boolean includeShared,
                final APICallBack<DeviceTypesEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/users/{userId}/devicetypes");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4955471842778809086L;
            {
                    put( "userId", userId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5674608344375342529L;
            {
                    put( "offset", offset );
                    put( "count", count );
                    put( "includeShared", includeShared );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5084495865262784064L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DeviceTypesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeviceTypesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Delete User Application Properties
     * @param    userId    Required parameter: User Id
     * @param    aid    Optional parameter: Application ID
     * @return    Returns the PropertiesEnvelope response from the API call 
     */
    public PropertiesEnvelope deleteUserProperties(
                final String userId,
                final String aid
    ) throws Throwable {
        APICallBackCatcher<PropertiesEnvelope> callback = new APICallBackCatcher<PropertiesEnvelope>();
        deleteUserPropertiesAsync(userId, aid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Delete User Application Properties
     * @param    userId    Required parameter: User Id
     * @param    aid    Optional parameter: Application ID
     * @return    Returns the void response from the API call 
     */
    public void deleteUserPropertiesAsync(
                final String userId,
                final String aid,
                final APICallBack<PropertiesEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/users/{userId}/properties");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5632780146323272893L;
            {
                    put( "userId", userId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5311653147867257087L;
            {
                    put( "aid", aid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4854838044677723012L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            PropertiesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PropertiesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Create User Application Properties
     * @param    userId    Required parameter: User Id
     * @param    properties    Required parameter: Properties to be updated
     * @param    aid    Optional parameter: Application ID
     * @return    Returns the PropertiesEnvelope response from the API call 
     */
    public PropertiesEnvelope createUserProperties(
                final String userId,
                final AppProperties properties,
                final String aid
    ) throws Throwable {
        APICallBackCatcher<PropertiesEnvelope> callback = new APICallBackCatcher<PropertiesEnvelope>();
        createUserPropertiesAsync(userId, properties, aid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create User Application Properties
     * @param    userId    Required parameter: User Id
     * @param    properties    Required parameter: Properties to be updated
     * @param    aid    Optional parameter: Application ID
     * @return    Returns the void response from the API call 
     */
    public void createUserPropertiesAsync(
                final String userId,
                final AppProperties properties,
                final String aid,
                final APICallBack<PropertiesEnvelope> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/users/{userId}/properties");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4651748084148113897L;
            {
                    put( "userId", userId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4944948760860094288L;
            {
                    put( "aid", aid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5129316645490630330L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(properties));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            PropertiesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PropertiesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Update User Application Properties
     * @param    userId    Required parameter: User Id
     * @param    properties    Required parameter: Properties to be updated
     * @param    aid    Optional parameter: Application ID
     * @return    Returns the PropertiesEnvelope response from the API call 
     */
    public PropertiesEnvelope updateUserProperties(
                final String userId,
                final AppProperties properties,
                final String aid
    ) throws Throwable {
        APICallBackCatcher<PropertiesEnvelope> callback = new APICallBackCatcher<PropertiesEnvelope>();
        updateUserPropertiesAsync(userId, properties, aid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Update User Application Properties
     * @param    userId    Required parameter: User Id
     * @param    properties    Required parameter: Properties to be updated
     * @param    aid    Optional parameter: Application ID
     * @return    Returns the void response from the API call 
     */
    public void updateUserPropertiesAsync(
                final String userId,
                final AppProperties properties,
                final String aid,
                final APICallBack<PropertiesEnvelope> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/users/{userId}/properties");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5408683316587830524L;
            {
                    put( "userId", userId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5181959489149400937L;
            {
                    put( "aid", aid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5652840196663835890L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(properties));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            PropertiesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PropertiesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get User application properties
     * @param    userId    Required parameter: User Id
     * @param    aid    Optional parameter: Application ID
     * @return    Returns the PropertiesEnvelope response from the API call 
     */
    public PropertiesEnvelope getUserProperties(
                final String userId,
                final String aid
    ) throws Throwable {
        APICallBackCatcher<PropertiesEnvelope> callback = new APICallBackCatcher<PropertiesEnvelope>();
        getUserPropertiesAsync(userId, aid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get User application properties
     * @param    userId    Required parameter: User Id
     * @param    aid    Optional parameter: Application ID
     * @return    Returns the void response from the API call 
     */
    public void getUserPropertiesAsync(
                final String userId,
                final String aid,
                final APICallBack<PropertiesEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/users/{userId}/properties");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5117657446860642861L;
            {
                    put( "userId", userId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5191911086109113701L;
            {
                    put( "aid", aid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4647230844744909351L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            PropertiesEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PropertiesEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}