/*
 * ARTIKCloudAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package cloud.artik.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import cloud.artik.api.*;
import cloud.artik.api.models.*;
import cloud.artik.api.exceptions.*;
import cloud.artik.api.http.client.HttpClient;
import cloud.artik.api.http.client.HttpContext;
import cloud.artik.api.http.request.HttpRequest;
import cloud.artik.api.http.response.HttpResponse;
import cloud.artik.api.http.response.HttpStringResponse;
import cloud.artik.api.http.client.APICallBack;
import cloud.artik.api.controllers.syncwrapper.APICallBackCatcher;

public class SubscriptionsController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static SubscriptionsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the SubscriptionsController class 
     */
    public static SubscriptionsController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new SubscriptionsController();
            }
        }
        return instance;
    }

    /**
     * Create Subscription
     * @param    subscriptionInfo    Required parameter: Subscription details
     * @return    Returns the SubscriptionEnvelope response from the API call 
     */
    public SubscriptionEnvelope createSubscription(
                final SubscriptionInfo subscriptionInfo
    ) throws Throwable {
        APICallBackCatcher<SubscriptionEnvelope> callback = new APICallBackCatcher<SubscriptionEnvelope>();
        createSubscriptionAsync(subscriptionInfo, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Create Subscription
     * @param    subscriptionInfo    Required parameter: Subscription details
     * @return    Returns the void response from the API call 
     */
    public void createSubscriptionAsync(
                final SubscriptionInfo subscriptionInfo,
                final APICallBack<SubscriptionEnvelope> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/subscriptions");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4879545247825401844L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(subscriptionInfo));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            SubscriptionEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<SubscriptionEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Delete Subscription
     * @param    subId    Required parameter: Subscription ID.
     * @return    Returns the SubscriptionEnvelope response from the API call 
     */
    public SubscriptionEnvelope deleteSubscription(
                final String subId
    ) throws Throwable {
        APICallBackCatcher<SubscriptionEnvelope> callback = new APICallBackCatcher<SubscriptionEnvelope>();
        deleteSubscriptionAsync(subId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Delete Subscription
     * @param    subId    Required parameter: Subscription ID.
     * @return    Returns the void response from the API call 
     */
    public void deleteSubscriptionAsync(
                final String subId,
                final APICallBack<SubscriptionEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/subscriptions/{subId}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4897356574753596365L;
            {
                    put( "subId", subId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5377530360288742182L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            SubscriptionEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<SubscriptionEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get Subscription
     * @param    subId    Required parameter: Subscription ID.
     * @return    Returns the SubscriptionEnvelope response from the API call 
     */
    public SubscriptionEnvelope getSubscription(
                final String subId
    ) throws Throwable {
        APICallBackCatcher<SubscriptionEnvelope> callback = new APICallBackCatcher<SubscriptionEnvelope>();
        getSubscriptionAsync(subId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get Subscription
     * @param    subId    Required parameter: Subscription ID.
     * @return    Returns the void response from the API call 
     */
    public void getSubscriptionAsync(
                final String subId,
                final APICallBack<SubscriptionEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/subscriptions/{subId}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5433136042981213462L;
            {
                    put( "subId", subId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5162532486968643492L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            SubscriptionEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<SubscriptionEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get Messages
     * @param    notifId    Required parameter: Notification ID.
     * @param    offset    Optional parameter: Offset for pagination.
     * @param    count    Optional parameter: Desired count of items in the result set.
     * @param    order    Optional parameter: Sort order of results by ts. Either 'asc' or 'desc'.
     * @return    Returns the NotifMessagesResponse response from the API call 
     */
    public NotifMessagesResponse getMessages(
                final String notifId,
                final Integer offset,
                final Integer count,
                final String order
    ) throws Throwable {
        APICallBackCatcher<NotifMessagesResponse> callback = new APICallBackCatcher<NotifMessagesResponse>();
        getMessagesAsync(notifId, offset, count, order, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get Messages
     * @param    notifId    Required parameter: Notification ID.
     * @param    offset    Optional parameter: Offset for pagination.
     * @param    count    Optional parameter: Desired count of items in the result set.
     * @param    order    Optional parameter: Sort order of results by ts. Either 'asc' or 'desc'.
     * @return    Returns the void response from the API call 
     */
    public void getMessagesAsync(
                final String notifId,
                final Integer offset,
                final Integer count,
                final String order,
                final APICallBack<NotifMessagesResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/notifications/{notifId}/messages");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4823188542523305725L;
            {
                    put( "notifId", notifId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4937222154682353265L;
            {
                    put( "offset", offset );
                    put( "count", count );
                    put( "order", order );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5632870636360943948L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            NotifMessagesResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<NotifMessagesResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get All Subscriptions
     * @param    uid    Optional parameter: User ID
     * @param    offset    Optional parameter: Offset for pagination.
     * @param    count    Optional parameter: Desired count of items in the result set.
     * @return    Returns the SubscriptionsEnvelope response from the API call 
     */
    public SubscriptionsEnvelope getAllSubscriptions(
                final String uid,
                final Integer offset,
                final Integer count
    ) throws Throwable {
        APICallBackCatcher<SubscriptionsEnvelope> callback = new APICallBackCatcher<SubscriptionsEnvelope>();
        getAllSubscriptionsAsync(uid, offset, count, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get All Subscriptions
     * @param    uid    Optional parameter: User ID
     * @param    offset    Optional parameter: Offset for pagination.
     * @param    count    Optional parameter: Desired count of items in the result set.
     * @return    Returns the void response from the API call 
     */
    public void getAllSubscriptionsAsync(
                final String uid,
                final Integer offset,
                final Integer count,
                final APICallBack<SubscriptionsEnvelope> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/subscriptions");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5027511081284667085L;
            {
                    put( "uid", uid );
                    put( "offset", offset );
                    put( "count", count );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5309570761566317324L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            SubscriptionsEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<SubscriptionsEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Validate Subscription
     * @param    subId    Required parameter: Subscription ID.
     * @param    validationCallbackRequest    Required parameter: Subscription validation callback request
     * @return    Returns the SubscriptionEnvelope response from the API call 
     */
    public SubscriptionEnvelope createValidateSubscription(
                final String subId,
                final ValidationCallbackInfo validationCallbackRequest
    ) throws Throwable {
        APICallBackCatcher<SubscriptionEnvelope> callback = new APICallBackCatcher<SubscriptionEnvelope>();
        createValidateSubscriptionAsync(subId, validationCallbackRequest, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Validate Subscription
     * @param    subId    Required parameter: Subscription ID.
     * @param    validationCallbackRequest    Required parameter: Subscription validation callback request
     * @return    Returns the void response from the API call 
     */
    public void createValidateSubscriptionAsync(
                final String subId,
                final ValidationCallbackInfo validationCallbackRequest,
                final APICallBack<SubscriptionEnvelope> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/subscriptions/{subId}/validate");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4751408771108913439L;
            {
                    put( "subId", subId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4650855622416006094L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(validationCallbackRequest));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            SubscriptionEnvelope _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<SubscriptionEnvelope>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}